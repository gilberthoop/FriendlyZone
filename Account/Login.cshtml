
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{
    // Initialize general page variables
    var theemail = "";
    var thepassword = "";
    var rememberMe = false;
    var isloggedin = true;

    var returnUrl = Request.QueryString["ReturnUrl"];
    if (returnUrl.IsEmpty()) {
        // Some external login providers always require a return URL value
        returnUrl = Href("~/Member");
    }

    // Setup validation
    Validation.RequireField("theemail", "You must specify an email address.");
    Validation.RequireField("thepassword", "You must specify a password.");
    Validation.Add("thepassword",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Password must be at least 6 characters"));

    // If this is a POST request, validate and process data
    if (IsPost) {
        AntiForgery.Validate();
        // is this an external login request?
        string provider = Request.Form["provider"];
        if (!provider.IsEmpty()) {
            OAuthWebSecurity.RequestAuthentication(provider, Href("~/Account/RegisterService", new { returnUrl }));
            return;
        } else if (Validation.IsValid()) {
            theemail = Request.Form["theemail"];
            thepassword = Request.Form["thepassword"];
            rememberMe = Request.Form["rememberMe"].AsBool();

            if (WebSecurity.UserExists(theemail) && WebSecurity.GetPasswordFailuresSinceLastSuccess(theemail) > 4 && WebSecurity.GetLastPasswordFailureDate(theemail).AddSeconds(60) > DateTime.UtcNow) {
                Response.Redirect("~/Account/AccountLockedOut");
                return;
            }

            // Attempt to log in using provided credentials
            if (WebSecurity.Login(theemail, thepassword, rememberMe)) {
                // TODO
                // Set the IsLoggedIn Field to False when user logs out
                isloggedin = false;
                var db = Database.Open("StarterSite");
              //  var userLoggedIn = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
              //  db.Execute("UPDATE UserProfile SET IsLoggedIn=1 WHERE Email")          
              //  db.Execute("INSERT INTO UserProfile (Email, UserName, IsLoggedIn) VALUES (@0, @1, @2)", email,username,isLoggedIn);
                var updateQueryString = "UPDATE UserProfile SET IsLoggedIn=1 WHERE Email= '" + theemail + "' ";   
                // ->NEVER DO THIS, PRONE TO SQL INJECTION
                // Must prevent SQL injection atacks by using parameters
                db.Execute(updateQueryString);

                Context.RedirectLocal(returnUrl);
                return;
            } else {
                ModelState.AddFormError("The user name or password provided is incorrect.");
            }
        }
    }
}