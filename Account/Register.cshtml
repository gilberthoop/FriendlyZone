@* Remove this section if you are using bundling *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{
  //  Layout = "~/_MainLayout.cshtml";
    Page.Title = "Register";

    /* 
        ADMIN
        EMAIL: williamgo@sample.com
        PASSWORD: samplepassword
    */ 

    /*
        TO INCLUDE IMAGE IN THE DATABASE, STORE THE IMAGE PATH, THEN ACCESS FROM THE IMAGE FOLDER (BY REFERING)
    */

    // Initialize general page variables
    var username = "";
    var email = "";
    var confirmEmail = "";
    var password = "";
    var confirmPassword = "";
    var profilePicture = "";
    var isLoggedIn = false;
    var followCount = 0;

    // Setup validation
    Validation.RequireField("userName", "Please enter your username");
    Validation.RequireField("email", "You must specify an email address.");
    Validation.Add("confirmEmail",
        Validator.EqualsTo("email", "Email and confirmation email do not match."));
    Validation.RequireField("password", "Password cannot be blank.");
    Validation.Add("confirmPassword",
        Validator.EqualsTo("password", "Password and confirmation password do not match."));
    Validation.Add("password",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Password must be at least 6 characters"));

    // If this is a POST request, validate and process data
    if (IsPost) {
        AntiForgery.Validate();
        username = Request.Form["username"];
        email = Request.Form["email"];
        confirmEmail = Request.Form["confirmEmail"];
        password = Request.Form["password"];
        confirmPassword = Request.Form["confirmPassword"];
        profilePicture = "Images/default-profile.png";
        isLoggedIn = true;
        followCount = 0;

        // Validate the user's captcha answer
         if (!ReCaptcha.Validate("6Ld4XB0TAAAAAB4x1GuYaHKhYtMMiU-3LSUxCTEe")) {
             ModelState.AddError("recaptcha", "Captcha response was not correct");
         }

        // If all information is valid, create a new account
        if (Validation.IsValid() && ModelState.IsValid) {
            // Insert a new user into the database
            var db = Database.Open("StarterSite");


            // Check if user already exists
            var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
            if (user == null) { 
                // Insert email, username, and default profile picture into the profile table
                db.Execute("INSERT INTO UserProfile (Email, UserName, IsLoggedIn, ProfilePicture) VALUES (@0, @1, @2, @3)",
                                email, username, isLoggedIn, profilePicture);
                var userResult = db.QuerySingle("SELECT * FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
                var roleResult = db.QuerySingle("SELECT RoleId FROM webpages_Roles WHERE RoleName=@0","Member");
                db.Execute("INSERT INTO webpages_UsersInRoles (UserId,RoleId) Values (@0,@1)", userResult.UserId,roleResult.RoleId);


                // Insert the initial follow count of the newly registered account
                db.Execute("INSERT INTO Followers (UserId,FollowCount) VALUES (@0,@1)", userResult.UserId, followCount);



                // Create and associate a new entry in the membership database.
                // If successful, continue processing the request
                try {
                    bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                    var token = WebSecurity.CreateAccount(email, password, requireEmailConfirmation);
                    if (requireEmailConfirmation) {
                        var hostUrl = Request.Url.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
                        var confirmationUrl = hostUrl + VirtualPathUtility.ToAbsolute("~/Account/Confirm?confirmationCode=" + HttpUtility.UrlEncode(token));

                        WebMail.Send(
                            to: email,
                            subject: "Please confirm your account",
                            body: "Your confirmation code is: " + token + ". Visit <a href=\"" + confirmationUrl + "\">" + confirmationUrl + "</a> to activate your account."
                        );
                    }

                    if (requireEmailConfirmation) {
                        // Thank the user for registering and let them know an email is on its way
                        Response.Redirect("~/Account/Thanks");
                    } else {
                        // Navigate back to the homepage and exit
                        WebSecurity.Login(email, password);

                        Response.Redirect("~/Member");
                    }
                } catch (System.Web.Security.MembershipCreateUserException e) {
                    ModelState.AddFormError(e.Message);
                }
            } else {
                // User already exists
                ModelState.AddFormError("Email address is already in use.");
            }
        }
    }
} 

<!DOCTYPE html>
<html lang="en">
    <head> 
        <link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
	    <link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
	    <link href="http://fonts.googleapis.com/css?family=Lato:300,400,700,300italic,400italic,700italic" rel="stylesheet" type="text/css">
        <link href='https://fonts.googleapis.com/css?family=Indie+Flower' rel='stylesheet' type='text/css'>
        <link href='https://fonts.googleapis.com/css?family=Montserrat' rel='stylesheet' type='text/css'>
        <link rel="stylesheet" type="text/css" href="~/styles/app.css"> 

        <meta charset="utf-8" /> 
        <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta charset="utf-8" />

        <title>@Page.Title</title>
        <script src='https://www.google.com/recaptcha/api.js'></script>
    </head>
    <body>
        <nav class="navbar navbar-default navbar-fixed-top">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              <i class="fa fa-users" style="font-size: 45px;color: #12466d"></i>
              <a class="navbar-brand" href="~/">FriendlyZone</a>
            </div>
            <div id="navbar" class="collapse navbar-collapse">
              <ul class="nav navbar-nav" id="nav">
                <li id="home"><a href="~/">Home</a></li>
                <!-- ENABLE ACCESS TO ACCOUNT AFTER LOG-IN -->
                @if (WebSecurity.IsAuthenticated) { 
                        <li id="myaccount"><a href="~/Account/MyProfile">My Account</a></li>
                        <li id="member"><a href="~/Member">Member</a></li> 
                }
                <li id="about"><a href="~/About">About</a></li>
                <li id="contact"><a href="~/Contact">Contact</a></li>
                <!-- ADMIN ACCOUNT ACCESS ONLY -->
                @if (User.IsInRole("Admin")) { 
                    <li><a href="~/Admin">Admin</a></li>
                }
              </ul>
              <div class="nav navbar-nav navbar-right">
                  @if (WebSecurity.IsAuthenticated) {
                        <li><a href="~/Account/MyProfile" title="Manage">Hello,  @WebSecurity.CurrentUserName!</a></li>
                        <li>
                            <form id="logoutForm" action="~/Account/Logout" method="post">
                                    @AntiForgery.GetHtml() 
                                <p style="padding-left: 30px;">
                                    <a class="btn btn-success navbar-form navbar-right" href="javascript:document.getElementById('logoutForm').submit()" style="color: white;">Log out</a>
                                  <!--  <input type="submit" name="logout" value="Log out"> --> 
                                </p>
                             </form>  
                        </li> 
                        } 
               </div>
            </div>
          </div>
         </nav>

        <div id="body"> 
            <section class="content-wrapper main-content clear-fix">
                <div class="container">
                   <div class="row" style="padding-top: 90px;"> 
                         <div class="col-md-6 col-md-offset-3 center">
                            <h1 style="text-align: center">Friendly Zone</h1>
                            <hr>
                            <h3>Create a new account</h3> 
                                <form action="~/Account/Register" method="post">
                                @AntiForgery.GetHtml()
                                @* If at least one validation error exists, notify the user *@
                                @Html.ValidationSummary("Account creation was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)
                                <fieldset> 
                                    <div class="field">
                                        <label for="username" @if(!ModelState.IsValidField("username")) {<text>class="error-label"</text>}></label>
                                        <input type="text" id="username" name="username" value="@username" @Validation.For("username") placeholder="Username" />
                                        @*Write  any username validation errors to the page *@
                                        @Html.ValidationMessage("username")
                                    </div>
                                    <div class="field">
                                        <label for="email" @if(!ModelState.IsValidField("email")){<text>class="error-label"</text>}></label>
                                            <input type="text" id="email" name="email" value="@email" @Validation.For("email") placeholder="Email address" />
                                            @* Write any email validation errors to the page *@
                                            @Html.ValidationMessage("email")
                                    </div>
                                    <div class="field">
                                        <label for="confirmEmail" @if(!ModelState.IsValidField("confirmEmail")) {<text>class="error-label"</text>}></label>
                                            <input type="text" id="confirmEmail" name="confirmEmail" @Validation.For("confirmEmail") placeholder="Confirm email" />
                                            @* Write any password validation errors to the page *@
                                            @Html.ValidationMessage("confirmEmail")
                                    </div>
                                    <div class="field">
                                        <label for="password" @if(!ModelState.IsValidField("password")) {<text>class="error-label"</text>}></label>
                                            <input type="password" id="password" name="password" @Validation.For("password") placeholder="Password" />
                                            @* Write any password validation errors to the page *@
                                            @Html.ValidationMessage("password")
                                    </div>
                                    <div class="field">
                                        <label for="confirmPassword" @if(!ModelState.IsValidField("confirmPassword")) {<text>class="error-label"</text>}></label>
                                            <input type="password" id="confirmPassword" name="confirmPassword" @Validation.For("confirmPassword") placeholder="Confirm password" />
                                            @* Write any password validation errors to the page *@
                                            @Html.ValidationMessage("confirmPassword")
                                    </div>
                                    <div class="recaptcha">  
                                            @ReCaptcha.GetHtml("6Ld4XB0TAAAAAHTBdyKptybsceoB6IrMwkAy5JWG", theme: "white")
                                            @Html.ValidationMessage("recaptcha")
                                    </div> 
                                    <br><input type="submit" value="Register" />
                                </fieldset>
                            </form> 
                      </div>
                   </div>
                </div>
            </section>
        </div>
        <footer class="copyright" style="text-align: center">
            <div class="content-wrapper">
                <div class="float-left">
                    <p>&copy; @DateTime.Now.Year - William Gilbert Go</p>
                </div>
            </div>
        </footer> 
         
          @if (Session[WebSecurity.CurrentUserName] == null) {
                // if session has expired submit a post request to logout the user
                    Session.Abandon();
                    <script>
                        $.post("~/Account/Logout");
                    </script>
                }
         
         <script type="text/javascript" src="https://code.jquery.com/jquery-2.1.4.js"></script>
         <script src="https://code.jquery.com/jquery-3.1.0.min.js"></script>
         <script type="text/javascript" src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>

         <script>
             $(window).unload(function () {
                 alert("Have a nice day!");
             });
         </script>
    </body>
</html>
